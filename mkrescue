#!/bin/bash

# Set up a rescue USB stick.
# Partition it as one large partition, vfat, with a /boot directory containing
# all the rescue tools.

label=rescue
libdir="$(dirname $0)/modules"
tmpdir="/tmp/$$.tmp"
mntdir="/tmp/$$.mnt"
cachedir="$HOME/.cache/mkrescue"

set -e
trap -- 'echo "Unexpected error! Aborting!"; cleanup' EXIT

# Default implementations of module functions.
function describe() { echo -n "<description missing>"; }
function clean() { rm -rf "$cachedir/$module"; }
function pre() { return 0; }
function dest() { echo "$module"; }
function install() {
  rsync -rL "$cachedir/" "$bootdir/$(module $module dest)/"
}
function boot() { return 0; }
function post() { return 0; }

function status() {
  echo "[$module] $*"
}

function cleanup() {
  mount | fgrep -q "$mntdir" && umount "$mntdir"
  if [[ $image_file ]]; then
    losetup -d $(losetup -j $image_file | cut -d: -f1)
  fi
  rm -rf "$mntdir" "$tmpdir"
}

function die_happy() {
  trap -- cleanup EXIT
  exit 0
}

function module() {
  module=$1; shift
  bootdir="$mntdir/boot"
  if [[ ! -d "$cachedir/$module" ]]; then
    mkdir -p "$cachedir"
    rsync -r "$libdir/$module/" "$cachedir/$module/"
  fi
  (
    cachedir="$cachedir/$module"
    export module label cachedir tmpdir bootdir libdir
    source "$cachedir/.rescue" && "$@"
  )
}

function help() {
  cat <<EOF
mkrescue -- make a rescue USB stick.
Usage: mkrescue [options] modules...
  -i       -- device is an image file, automanage with losetup
  -l label -- give filesystem this label; default $label
  -u       -- update already mounted stick, don't partition/format
  -C dir   -- use dir as cache directory, default $cachedir
  -c       -- tell the modules to "clean" themselves first
  -D       -- debug; print commands being executed
  -m cmd   -- execute command on all modules
  -d dest  -- device or image file to install onto
  modules  -- modules to install, available ones are:
EOF
  for module in $(ls $libdir); do
    printf "    %12s -- %s\n" "$module" "$(module $module describe)"
  done
}

while true; do
  case "$1" in
    -i) image_file=true; shift;;
    -u) update=true; shift;;
    -D) debug=true; shift;;
    -c) clean=true; shift;;
    -C) cachedir="$1"; shift;;
    -m) shift; module_command="$1"; shift;;
    -l) shift; label="$1"; shift;;
    -h) show_help=true; shift;;
    -d) shift; dev="$1"; shift;;
    *) break;;
  esac
done

if [[ $show_help ]]; then
  help
  die_happy
fi

if [[ "$*" == "all" ]]; then
  set -- $(ls $libdir)
fi

if [[ $module_command ]]; then
  if [[ $debug ]]; then
    set -x
  fi

  for module in "$@"; do
    module "$module" "$module_command"
  done
  die_happy
fi

label=$(echo "$label" | tr [:lower:] [:upper:])

if [[ $update && $image_file ]]; then
  echo "-u and -i can't be specified at the same time"
  echo "mount the image and use -u on its own"
  exit 1
fi

cat <<EOF
Temp dir:  $tmpdir
Mount dir: $mntdir
Cache dir: $cachedir
Lib dir:   $libdir
Label:     $label
Device:    $dev
Modules:   $@
EOF

echo -n "Press enter..."
read

mkdir -p "$tmpdir"
mkdir -p "$cachedir"

function partition() {
  echo "Editing partition table"
  echo '2048;+;0C;*;' | sfdisk --quiet -uS --force "$dev" >/dev/null 2>&1
}

function prepare_boot_device() {
  if [[ $image_file ]]; then
    echo "Setting up loop device for image file"
    image_file="$dev"
    losetup -P -f "$dev"
    dev=$(losetup -j "$dev" --raw -ONAME --noheadings | head -n1)
    boot="${dev}p1"
  else
    boot="${dev}1"
  fi
}

function write_mbr() {
  echo "Writing master boot record to $dev"
  dd if=mbr.bin of="$dev" status=none
}

function write_filesystem() {
  echo "Creating filesystem '$label' on $boot"
  mkfs.vfat -n "$label" "$boot"
  mount "$boot" "$mntdir"
}

function install_core() {
  rsync -rL --delete "$libdir/.boot/" "$mntdir/boot/"
}

function install_module() {
  module=$1
  echo "Installing module: $module"
  module $module pre
  module $module install
  (echo -e "\n# Module: $module" && module $module boot) \
    >> "$mntdir/boot/syslinux/syslinux.cfg"
  module $module post
}

function install_bootloader() {
  echo "Installing bootloader"
  umount "$mntdir"
  syslinux --install --directory /boot/syslinux "$boot"
}

if [[ $debug ]]; then
  set -x
fi

if [[ $update ]]; then
  ln -rs "$dev" "$mntdir"
else
  mkdir -p "$mntdir"
  partition
  prepare_boot_device
  write_mbr
  write_filesystem
fi

install_core
for module in "$@"; do
  [[ $clean ]] && module $module clean
  install_module $module
done

if [[ $debug ]]; then
  echo '# Contents of filesystem'
  (cd "$mntdir" && find)
  echo '# Bootloader configuration'
  cat "$mntdir/boot/syslinux/syslinux.cfg"
fi

if [[ ! $update ]]; then
  install_bootloader
fi

echo "Done!"
die_happy
